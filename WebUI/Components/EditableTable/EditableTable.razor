@using Microsoft.Extensions.Localization
@using VideoVault.WebApi;
@using VideoVault.WebUI.Components.ContextMenu;
@inject IStringLocalizer<App> L

<style>
    .selected-cell
    {
        background-color: red;
    }
</style>

<div class="form-group">
    
    <div class="m-auto">
        <label class="col-4">@L["TEMPLATE_NR_ROWS"]</label>
        <InputNumber @bind-Value="Sheet.Height" TValue="int" class="form-control col-1 d-inline" @onchange=UpdateTableValues />
    </div>
    <div class="m-auto">
        <label class="col-4">@L["TEMPLATE_NR_COLUMNS"]</label>
        <InputNumber @bind-Value="Sheet.Width" TValue="int" class="form-control col-1 d-inline" @onchange=UpdateTableValues />
    </div>
    @pressedKey
</div>
@* Render the table *@
<table @attributes="@TableAttributes" class="table-bordered w-100">
    <thead>
        <tr>
            <th style="max-width:100px;">@L["RowNr"]</th>
            @for(var i = 0; i < Sheet.Width; i++)
            {
                <th>@CreateColumnHeader(i)</th>
            }
        </tr>
    </thead>
    <tbody>
        @{
            @for (var row = 0; row < Sheet.Height; row++)
            {
                <tr>
                    @for (var column = 0; column < Sheet.Width + 1; column++)
                    {
                        if (column == 0)
                        {
                            <td style="max-width:100px;"> @(row+1) </td>
                            continue;
                        }
                        int localRow = row;
                        int localColumn = column;
                        //<tr @key="item.GetHashCode()" class="@(RowClass?.Invoke(item, index++))">
                        <td @onclick="(args) => OnClick(args, localRow, localColumn)"
                            @oncontextmenu="(args) => OnRightClick(args, localRow, localColumn)"
                            @oncontextmenu:preventDefault="true" 
                            class="@(Selected.Contains((localRow, localColumn)) ? "selected-cell" : "")">
                          
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>


<ContextMenu PosX="@PosX"
             PosY="@PosY"
             @bind-IsVisible="ShowContextMenu"
             @bind-IsVisible:event="IsVisibleChanged">
</ContextMenu>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> TableAttributes { get; set; }

    [Parameter]
    public SheetTemplateDto Sheet { get; set; }
    private List<(int, int)> Selected { get; set; } = new ();
    private string[,] Values { get; set; }
    private string pressedKey;

    private bool ShowContextMenu { get; set; } = false;
    private double PosX { get; set; } = 0;
    private double PosY { get; set; } = 0;

    // This fragment should contains all the GridColumn

    // GridColumn uses this method to add a column

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // The first render will instantiate the GridColumn defined in the ChildContent.
            // GridColumn calls AddColumn during its initialization. This means that until
            // the first render is completed, the columns collection is empty.
            // Calling StateHasChanged() will re-render the component, so the second time it will know the columns
            StateHasChanged();
            //_height = Sheet.Rows.Count();
            //_width = Sheet.Rows.Select(x => x.Index).DefaultIfEmpty(0).Max();
        }
    }

    private string CreateColumnHeader(int index)
    {
        var columnHeader = "";
        var remaining = index;
        do
        {
            columnHeader += (char)('A' + (remaining) % 26);
            remaining -= 26;
        } 
        while (remaining >= 0);

        return columnHeader;
    }

    private void UpdateTableValues()
    {
        /*Values = new string[_width,_height];
        for (int column=0; column < _width; column++)
            {
            for(int row=0; row<_height;row++ )
                {
                Values[column, row] = string.Empty;
        }
        }*/
    }


    private void OnClick(MouseEventArgs args, int row, int column)
    {
        var index = Selected.IndexOf((row, column));
        if (index >= 0)
        {
            Selected.RemoveAt(index);
        }
        else
        {
            if (!args.CtrlKey)
            {
                Selected.Clear();
            }                
            Selected.Add((row, column));
        }
    }

    private void OnRightClick(MouseEventArgs args, int row, int column)
    {
        ShowContextMenu = !ShowContextMenu;
        PosX = args.ClientX;
        PosY = args.ClientY;
    }
    
}