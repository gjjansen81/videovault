@using VideoVault.WebApi
@using Microsoft.Extensions.Localization
@using VideoVault.Domain.Entities
@using VideoVault.WebUI.Components.Tab
@using System.Linq.Expressions
@inject IStringLocalizer<App> L

@if (IsVisible)
{
    <div class="modal fade show d-block" id="mappingModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="titleLabel">@Node.FriendlyName</h5>
                    <button type="button" class="close" @onclick="@Close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@Node" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        @foreach (var parameter in Node.Parameters)
                        {
                        @* Use @key to help the diff algorithm when updating the collection *@
                            <label for="@parameter.Name">@parameter.Description: </label>
                            if (parameter.DateType == DataType.Bool)
                            {
                                <ParameterInputBoolean Parameter="parameter"></ParameterInputBoolean>
                            }
                          @* if (parameter.DateType == DataType.Bool)
                            {
                                <InputCheckbox id="@parameter.Name" class="form-control" checked="@parameter.Value?.Equals("1")" ValueChanged="@" ValueExpression="@( () => parameter.Value.Equals("1"))"></InputCheckbox>
                            }
                            else if (parameter.DateType == DataType.Int)
                            {
                                <InputText type="number" id="@parameter.Name" class="form-control" Value="@parameter.Value?.ToString()" ValueChanged="value => parameter.Value = Convert.ToUInt32(value)" placeholder="@parameter.Placeholder" ValueExpression="@( () => parameter.Value.ToString())"></InputText>
                            }
                            else if( parameter.DateType == DataType.Double)
                            {
                                <InputText type="number" id="@parameter.Name" class="form-control" Value="@parameter.Value?.ToString()" ValueChanged="value => parameter.Value = Convert.ToDouble(value)" placeholder="@parameter.Placeholder" ValueExpression="@( () => parameter.Value.ToString())"></InputText>
                            }
                            else* @ if (parameter.DateType == DataType.DateTime)
                            {
                                <InputText type="date" id="@parameter.Name" class="form-control" Value="@parameter.Value" ValueChanged="value => parameter.Value = value" placeholder="@parameter.Placeholder" ValueExpression="@( () => parameter.Value.ToString())"></InputText>
                            }
                             <InputText id="@parameter.Name" class="form-control" @bind-Value="@parameter.Value" placeholder="@parameter.Placeholder"></InputText>
                               *@
                            else
                            {
                                <ParameterInputText Parameter="parameter"></ParameterInputText>
                            }
                            <ValidationMessage For="@(() => Node.Name)"/>
                        }
                        <button type="submit" class="btn btn-primary">@L["Save"]</button>
                        <a class="btn btn-outline-primary" @onclick="@Close">Close</a>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
@code {

    // Next line is needed so we are able to add <TabPage> components inside
    [Parameter]
    public MappingNodeDto Node { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }
    
    private void HandleValidSubmit()
    {
        //Template = await TemplateService.CreateAsync(new UpsertTemplateCommand() { Template = Template });
        //if (Template.Id > 0)
        {
          //  NavigationManager.NavigateTo($"Templates/List/");
        }
    }

    private void Close()
    {
        IsVisible = false;
    }
}
    