@using VideoVault.WebApi
@using Microsoft.Extensions.Localization
@using VideoVault.WebUI.Components.TreeView
@using VideoVault.WebUI.Components.MappingModal
@using VideoVault.WebUI.Models

@inject IStringLocalizer<App> L

<li class="node draggable" draggable="true" >
   
        <span class="node-label @(SelectedNode == Node ? "alert-primary" : "")">
            <span class="fa @IconClass" @onclick="@(SpanToggle)" @key=@($"toggle_{Node.Guid}")></span>
            <span @onclick="@(OnSetAsSelectedAsync)" @key=@($"select_{Node.Guid}")>@L[Node.FriendlyName]</span>
        </span>
        <span class="node-label l-3 fa fa-plus-square-o" @onclick="OnShowNewNodeModalAsync" @key=@($"add_{Node.Guid}")></span>
        <span class="node-label l-3 fa fa-trash-o" @onclick="OnDeleteNodeAsync" @key=@($"delete_{Node.Guid}")></span>
  @*  <div class="node @(_dragEnter==Node?"inserting":"")"
         draggable="true"
         @key=@Node?.Guid
         id="@Node?.Guid" 
         ondragover="event.preventDefault();"
         ondragstart="event.dataTransfer.setData('', event.target.id);"
         @ondragstart="@( (e) => hondragstart(e, Node))"
         @ondrop="@( () => hondropOverAFriend(Node))"
         @ondragenter="@( ()=> hondragenter(Node) )"
         @ondragend="@( ()=> hondragend() )"></div>*@
    <ul hidden="@HideChildren">
        @if (HasChildren)
        {
            foreach (var child in Node.Children)
            {
                <CascadingValue Value="@AvailableNodes" Name="AvailableNodes" IsFixed="true">
                    <TreeNode Node="child"
                              ParentNode="Node"
                              OnShowNewNodeModalClicked="@(OnShowNewNodeModalCallbackAsync)"
                              OnSetAsSelected="@(OnSetAsSelectedCallbackAsync)"
                              OnConfirmationRequired="@(OnConfirmationRequiredCallback)"
                              OnNodeDeleted="@(OnNodeDeletedCallbackAsync)" @key=child></TreeNode>
                </CascadingValue>
            }
        }
    </ul>
</li>
<div style="height: 1.5em;" 
     ondragover="event.preventDefault();"
     @ondrop="hondropBotton"
     @ondragenter="hondragenterBotton"></div>
<style>
    .inserting
    {
        border-top: 1px solid black;
        margin-top: 5px;
    }
</style>
@code {
    [Parameter]
    public MappingNodeDto ParentNode { get; set; }
   
    [Parameter]
    public MappingNodeDto Node { get; set; }
    
    [CascadingParameter(Name="AvailableNodes")]
    public List<MappingNodeDto> AvailableNodes { get; set; } 

    [CascadingParameter(Name="SelectedNode")]
    public MappingNodeDto SelectedNode { get; set; } 

    [Parameter]
    public EventCallback<MappingNodeDto> OnSetAsSelected{ get; set; }
  
    [Parameter]
    public EventCallback<MappingNodeDto> OnShowNewNodeModalClicked { get; set; }
    
    [Parameter]
    public EventCallback<ConfirmationArgumentsModel> OnConfirmationRequired { get; set; }
    
    [Parameter]
    public EventCallback<MappingNodeDto> OnNodeDeleted { get; set; }

    private string IconClass => HasChildren ? (HideChildren ? "fa-folder-o" : "fa-folder-open-o") : "fa-file-code-o";
    private bool HideChildren { get; set; } 
    private bool HasChildren => Node.Children?.Count != 0;
    
    private async Task OnShowNewNodeModalCallbackAsync(MappingNodeDto node)
    {
        await OnShowNewNodeModalClicked.InvokeAsync(node);
    }

    private async Task OnShowNewNodeModalAsync()
    {
        await OnShowNewNodeModalClicked.InvokeAsync(Node);
    }
    
    private async Task OnSetAsSelectedCallbackAsync(MappingNodeDto node)
    {
        await OnSetAsSelected.InvokeAsync(node);
    }
    
    private async Task OnConfirmationRequiredCallback(ConfirmationArgumentsModel confirmationArguments)
    {
        await OnConfirmationRequired.InvokeAsync(confirmationArguments);
    }

    private async Task OnSetAsSelectedAsync()
    {
        await OnSetAsSelected.InvokeAsync(Node);
    }

    private void SpanToggle()
    {
        HideChildren = !HideChildren;
    }

    private async Task OnNodeDeletedCallbackAsync(MappingNodeDto node)
    {
        bool DeleteNode()
        {
            Node.Children.Remove(node);
            return true;
        };

        await OnConfirmationRequired.InvokeAsync(new ConfirmationArgumentsModel()
        {
            Title = "Delete this node?",
            Message = $"Are you sure you want to delete node '{node.FriendlyName}'?",
            OnConfirm = DeleteNode
        });
    }

    private async Task OnDeleteNodeAsync()
    {
        await OnNodeDeleted.InvokeAsync(Node);
    }

    public void  hondropOverAFriend(MappingNodeDto friend)
    {
        _dragEnter=null;
        if (_draggedItem == null) return;
        if (_draggedItem == friend) return;
        var friendposition = Siblings.IndexOf(friend);
        Siblings.Insert(friendposition, _draggedItem!);
        _draggedItem=null;
    }
    
    public void  hondropBotton()
    {
        _dragEnter=null;
        if (_draggedItem == null) return;
        Siblings.Add(_draggedItem!);
        _draggedItem=null;
    }
    
    public void  hondragstart(DragEventArgs e, MappingNodeDto item)
    {
        e.DataTransfer.EffectAllowed = "move"; //does't run
        _draggedItem = item;
        _draggedItemPosition = Siblings.IndexOf(item);
        Siblings.Remove(_draggedItem!);
    }    
    
    public void  hondragenter(MappingNodeDto item) => _dragEnter = item;    
    public void  hondragenterBotton() => _dragEnter = null;
    
    public void  hondragend()
    {
    // never fired IDK why
        if (_draggedItem == null) return;        
        _dragEnter = null;
        Siblings.Insert(_draggedItemPosition, _draggedItem!);        
    }
    
#nullable enable
    private MappingNodeDto? _draggedItem;
    private MappingNodeDto? _dragEnter;
#nullable disable
    private int _draggedItemPosition;

    private List<MappingNodeDto> Siblings
    {
        get { return _siblings ??= ParentNode?.Children.ToList() ?? new List<MappingNodeDto>(); }
        set => _siblings = value;
    }

    private List<MappingNodeDto> _siblings;

}