@using VideoVault.WebApi
@using Microsoft.Extensions.Localization
@using VideoVault.WebUI.Components.TreeView
@using VideoVault.WebUI.Components.MappingModal

@inject IStringLocalizer<App> L

<li class="node">
    <span class="node-label" @onclick="@(SpanToggle)" @key=@($"toggle_{Node.Guid}")>
        <span class="fa @IconClass" ></span>
        <span>@L[Node.FriendlyName]</span>
    </span>                        
    <span class="node-label l-3 fa fa-plus-square-o" @onclick="OnShowNewNodeModal" @onclick:stopPropagation="true" @key=@($"add_{Node.Guid}")></span>

    <ul hidden="@HideChildren">
        @if (HasChildren) 
        {
            foreach (var child in Node.Children)
            {
                <CascadingValue Value="@AvailableNodes" Name="AvailableNodes" IsFixed="true">
                    <TreeNode Node="child" OnShowNewNodeModalClicked="@(OnShowNewNodeModalCallback)" @key=child></TreeNode>
                </CascadingValue>
            }
        }
    </ul>
</Li>

@code {
    [Parameter]
    public MappingNodeDto Node { get; set; }
    
    [CascadingParameter(Name="AvailableNodes")]
    public List<MappingNodeDto> AvailableNodes { get; set; } 
  
    [Parameter]
    public EventCallback<MappingNodeDto> OnShowNewNodeModalClicked { get; set; }

    private string IconClass => HasChildren ? (HideChildren ? "fa-folder-o" : "fa-folder-open-o") : "fa-file-code-o";
    private bool HideChildren { get; set; } 
    private bool HasChildren => Node.Children?.Count != 0;
    
    private async Task OnShowNewNodeModalCallback(MappingNodeDto node)
    {
        await OnShowNewNodeModalClicked.InvokeAsync(node);
    }

    private async Task OnShowNewNodeModal()
    {
        await OnShowNewNodeModalClicked.InvokeAsync(Node);
    }

    private void SpanToggle()
    {
        HideChildren = !HideChildren;
    }
}