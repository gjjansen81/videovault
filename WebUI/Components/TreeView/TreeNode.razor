@using VideoVault.WebApi
@using Microsoft.Extensions.Localization
@using VideoVault.WebUI.Components.TreeView
@using VideoVault.WebUI.Components.MappingModal
@using VideoVault.WebUI.Models
@using VideoVault.WebUI.Services

@inject ITreeCacheService TreeCacheService
@inject IStringLocalizer<App> L

<li class="node dropzone draggable @DropClass @(DraggingNode==Node?"inserting":"")"
        draggable="true"
        @key=@Node?.Guid
        id="@Node?.Guid"

        @ondragstart="@( (e) => HandleDragStart(e, Node))"
        @ondragstart:stopPropagation="true"
        @ondragenter="@( ()=> HandleDragEnter(Node) )"
        ondragover="event.preventDefault();" 
        @ondrop="@( () => HandleDrop(Node))"
        @ondrop:stopPropagation="true"
        @ondragleave="@(HandleDragLeave)"
        @ondragend="@( HandleDragEnd )">
       
        <span class="node-label @(SelectedNode == Node ? "alert-primary" : "")">
            <span class="fa @IconClass" @onclick="@(SpanToggle)" @key=@($"toggle_{Node.Guid}")></span>
            <span @onclick="@(OnSetAsSelectedAsync)" @key=@($"select_{Node.Guid}")>@L[Node.FriendlyName]</span>
        </span>
        <span class="node-label l-3 fa fa-plus-square-o" @onclick="OnShowNewNodeModalAsync" @key=@($"add_{Node.Guid}")></span>
        <span class="node-label l-3 fa fa-trash-o" @onclick="OnDeleteNodeAsync" @key=@($"delete_{Node.Guid}")></span>
    <ul hidden="@HideChildren" dropzone="move">
    
        @if (HasChildren)
        {
            foreach (var child in Node.Children)
            {
                <CascadingValue Value="@AvailableNodes" Name="AvailableNodes" IsFixed="true">
                    <TreeNode Node="child"
                              ParentNode="Node"
                              OnShowNewNodeModalClicked="@(OnShowNewNodeModalCallbackAsync)"
                              OnSetAsSelected="@(OnSetAsSelectedCallbackAsync)"
                              OnConfirmationRequired="@(OnConfirmationRequiredCallback)"
                              OnNodeDeleted="@(OnNodeDeletedCallbackAsync)" @key=child></TreeNode>
                </CascadingValue>
            }
        }
    </ul>
</li>
    
<style>
    .inserting
    {
        border-top: 1px solid black;
        margin-top: 5px;
    }
</style>
@code {
    [Parameter]
    public MappingNodeDto ParentNode { get; set; }
   
    [Parameter]
    public MappingNodeDto Node { get; set; }
    
    [CascadingParameter(Name="AvailableNodes")]
    public List<MappingNodeDto> AvailableNodes { get; set; } 

    [CascadingParameter(Name="SelectedNode")]
    public MappingNodeDto SelectedNode { get; set; } 
    
    public MappingNodeDto DraggingNode { get => TreeCacheService.DraggingNode; set => TreeCacheService.DraggingNode = value; }

    [Parameter]
    public EventCallback<MappingNodeDto> OnSetAsSelected{ get; set; }
  
    [Parameter]
    public EventCallback<MappingNodeDto> OnShowNewNodeModalClicked { get; set; }
    
    [Parameter]
    public EventCallback<ConfirmationArgumentsModel> OnConfirmationRequired { get; set; }
    
    [Parameter]
    public EventCallback<MappingNodeDto> OnNodeDeleted { get; set; }

    private string IconClass => HasChildren ? (HideChildren ? "fa-folder-o" : "fa-folder-open-o") : "fa-file-code-o";
    private bool HideChildren { get; set; } 
    private bool HasChildren => Node.Children?.Count != 0;
    private string DropClass { get; set; }

    private async Task OnShowNewNodeModalCallbackAsync(MappingNodeDto node)
    {
        await OnShowNewNodeModalClicked.InvokeAsync(node);
    }

    private async Task OnShowNewNodeModalAsync()
    {
        await OnShowNewNodeModalClicked.InvokeAsync(Node);
    }
    
    private async Task OnSetAsSelectedCallbackAsync(MappingNodeDto node)
    {
        await OnSetAsSelected.InvokeAsync(node);
    }
    
    private async Task OnConfirmationRequiredCallback(ConfirmationArgumentsModel confirmationArguments)
    {
        await OnConfirmationRequired.InvokeAsync(confirmationArguments);
    }

    private async Task OnSetAsSelectedAsync()
    {
        await OnSetAsSelected.InvokeAsync(Node);
    }

    private void SpanToggle()
    {
        HideChildren = !HideChildren;
    }

    private async Task OnNodeDeletedCallbackAsync(MappingNodeDto node)
    {
        bool DeleteNode()
        {
            Node.Children.Remove(node);
            return true;
        };

        await OnConfirmationRequired.InvokeAsync(new ConfirmationArgumentsModel()
        {
            Title = "Delete this node?",
            Message = $"Are you sure you want to delete node '{node.FriendlyName}'?",
            OnConfirm = DeleteNode
        });
    }

    private async Task OnDeleteNodeAsync()
    {
        await OnNodeDeleted.InvokeAsync(Node);
    }

    public void  HandleDrop(MappingNodeDto item)
    {
        //Handle drop
        //Move to friendif (DraggingNode == null || DraggingNode == Node) return;
        if (DraggingNode == null || DraggingNode == Node) return;

        Node.Children.Add(DraggingNode);
    
        TreeCacheService.DraggingParentNode.Children.Remove(DraggingNode);
        DraggingNode = null;
    }                           

    public void  HandleDragStart(DragEventArgs e, MappingNodeDto item)
    {
        e.DataTransfer.EffectAllowed = "move"; //does't run
        if (DraggingNode == null || DraggingNode.Depth <= item.Depth)
        {
            DraggingNode = item;
            TreeCacheService.DraggingParentNode = ParentNode;
        }
    }    
    
    public void  HandleDragEnter(MappingNodeDto item)
    {
        //Entering drag area of element
        //Check if we can drag our element to this element
        if (DraggingNode == Node) return;

        DropClass = DraggingNode == null ? "no-drop" : "can-drop";
    }

    public void  HandleDragEnd()
    {
        // never fired IDK why
    }

    private void HandleDragLeave()
    {
        //Leaving drag area of element
        //Clear style
        DropClass = "";
    }
}