@using Microsoft.Extensions.Localization
@using VideoVault.WebApi
    @using Microsoft.AspNetCore.Components
@using VideoVault.WebUI.Components.AddNodeModal

@inject IStringLocalizer<App> L 

<style>
    
/*css reference W3schools. "with small modification."*/
/* css begin*/
    .parentUl li ul {
        border-left: dotted 2px black;
        height: fit-content;
        border-start-end-radius: 2px;
    }
    
    ul, .parentUl {
        list-style-type: none;
    }

    .parentUl ul li {
        position: relative;
    }
    /*
    .parentUl ul li:before {
        content: "";
        position: absolute;
        top: 13px;
        left: -40px;
        width: 40px;
        height: 1px;
        border-bottom: dotted 2px black;
    }
        */
    .parentUl {
        margin: 0;
        padding: 0;
    }
    
    .node-label {
        cursor: pointer;
        -webkit-user-select: none; /* Safari 3.1+ */
        -moz-user-select: none; /* Firefox 2+ */
        -ms-user-select: none; /* IE 10+ */
        user-select: none;
        display: inline-block;
        font-weight: normal;
    }

    .node::before {
        display: inline-block;
        margin-right: 6px;
        transition: all 0.45s;
    }

    .node::before {
        /* -ms-transform: rotate(60deg); /* IE 9 * /
       -webkit-transform: rotate(60deg); /* Safari * /
       /*transform: rotate(60deg);*/
        transition: all 0.45s; 
    }

    .nested {
        display: none;
        transition: all 0.45s;
    }

    .active {
        display: block;
        transition: all 0.45s;
    }


</style>
<h1>ttttest</h1>
<div>
    @if (RootNode != null) 
    {
        <ul class="parentUl">
            <CascadingValue Value="@AvailableNodes" Name="AvailableNodes" IsFixed="true">
                <TreeNode Node="RootNode" OnShowNewNodeModalClicked="@(OnShowNewNodeModalCallback)"></TreeNode>
            </CascadingValue>
        </ul>
    }
</div>

<CascadingValue Value="@SelectedNode" Name="Node">
    <CascadingValue Value="@AvailableNodes" Name="AvailableNodes" IsFixed="true">
        <AddNodeModal @bind-IsVisible="ShowNewNodeModal" @bind-IsVisible:event="IsVisibleChanged"></AddNodeModal>
    </CascadingValue>
</CascadingValue>
@code {
    [Parameter]
    public MappingNodeDto RootNode { get; set; }
    
    [Parameter]
    public MappingNodeDto SelectedNode { get; set; }

    [CascadingParameter(Name = "AvailableNodes")]
    public List<MappingNodeDto> AvailableNodes { get; set; }

    private bool ShowNewNodeModal { get; set; }
    
    public string SelectedNewNode { get; set; }
    
    private void OnShowNewNodeModalCallback(MappingNodeDto node)
    {
        SelectedNode = node;
        ShowNewNodeModal = true;
    }
}