@using Microsoft.Extensions.Localization
@using VideoVault.WebApi

@inject IStringLocalizer<App> L
@*
    <CascadingValue> allows descendant components (defined in ChildContent) to receive the specified value.
    Child components need to declare a cascading parameter with the same type as "Value" (i.e. Grid<TRowData>).
    This allows GridColumn to get the Grid instance by using a CascadingParameter

        [CascadingParameter]public Grid<TRowData> OwnerGrid { get; set; }

    IsFixed="true" indicates that "Value" will not change. This is a
    performance optimization that allows the framework to skip setting up
    change notifications.
*@
<CascadingValue IsFixed="true" Value="this">@ChildContent</CascadingValue>

@* Render the table *@
<div>
    @if (RootNode != null && RootNode.Children != null) 
    {
        foreach (var node in RootNode.Children)
        {
            <TreeNode Node="node"></TreeNode>
        }
    }
</div>

@code {

    [Parameter]
    public MappingNodeDto RootNode { get; set; } 

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // The first render will instantiate the GridColumn defined in the ChildContent.
            // GridColumn calls AddColumn during its initialization. This means that until
            // the first render is completed, the columns collection is empty.
            // Calling StateHasChanged() will re-render the component, so the second time it will know the columns
            StateHasChanged();
        }
    }
}