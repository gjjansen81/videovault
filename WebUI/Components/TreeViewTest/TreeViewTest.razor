
@using Microsoft.Extensions.Localization
@using VideoVault.WebApi

@inject IStringLocalizer<App> L 


@* Render the table *@
<div>
    @if (RootNode != null) 
    {
        @L["tessttttt"]
        <ul class="parentUl">
            <CascadingValue Value="@AvailableNodes" Name="AvailableNodes" IsFixed="true">
                @BuildNodeHtml(RootNode)
            </CascadingValue>
        </ul>
    }
</div>

@code {

    [Parameter]
    public MappingNodeDto RootNode { get; set; }

    [CascadingParameter(Name = "AvailableNodes")]
    public List<MappingNodeDto> AvailableNodes { get; set; }

    
    internal static RenderFragment<MappingNodeDto> BuildNodeHtml = node => __builder =>
    {
        <li class="node">
            <span class="node-label" onclick="(SpanToggle(node))" key=node>
                <span class="fa IconClass" ></span>
                <span>L[node.FriendlyName]</span>
            </span>                        
            <span class="node-label l-3 fa fa-plus-square-o" onclick="(OnShowNewNodeModal(node))"></span>

            <ul hidden="false">
                @if (node.Children?.Count > 0) 
                {
                    @foreach (var child in node.Children)
                    {
                       @BuildNodeHtml(child);
                    }
                }
            </ul>
        </Li>
    };
    

    public void SpanToggle(MappingNodeDto node)
    {
        ;
    }
    public void OnShowNewNodeModal(MappingNodeDto node)
    {
        ;
    }
}



@*

<li class="node">
    <span class="node-label" @onclick="@(SpanToggle)">
        <span class="fa @IconClass" ></span>
        <span>@L[Node.FriendlyName]</span>
    </span>                        
    <span class="node-label l-3 fa fa-plus-square-o" @onclick="@(OnShowNewNodeModal)"></span>

    <ul hidden="@HideChildren">
        @if (HasChildren) 
        {
            foreach (var node in Node.Children)
            {
                <CascadingValue Value="@AvailableNodes" Name="AvailableNodes" IsFixed="true">
                    <TreeNode Node="node"></TreeNode>
                </CascadingValue>
            }
        }
    </ul>
</Li>

@*<MappingModal Node="Node" @bind-IsVisible="ShowNewNodeModal" @bind-IsVisible:event="IsVisibleChanged"></MappingModal>* @
<CascadingValue Value="@Node" Name="Node">
    <CascadingValue Value="@AvailableNodes" Name="AvailableNodes" IsFixed="true">
        <AddNodeModal @bind-IsVisible="ShowNewNodeModal" @bind-IsVisible:event="IsVisibleChanged"></AddNodeModal>
    </CascadingValue>
</CascadingValue>*@

<style>
    
/*css reference W3schools. "with small modification."*/
/* css begin*/
    .parentUl li ul {
        border-left: dotted 2px black;
        height: fit-content;
        border-start-end-radius: 2px;
    }
    
    ul, .parentUl {
        list-style-type: none;
    }

    .parentUl ul li {
        position: relative;
    }
    /*
    .parentUl ul li:before {
        content: "";
        position: absolute;
        top: 13px;
        left: -40px;
        width: 40px;
        height: 1px;
        border-bottom: dotted 2px black;
    }
        */
    .parentUl {
        margin: 0;
        padding: 0;
    }
    
    .node-label {
        cursor: pointer;
        -webkit-user-select: none; /* Safari 3.1+ */
        -moz-user-select: none; /* Firefox 2+ */
        -ms-user-select: none; /* IE 10+ */
        user-select: none;
        display: inline-block;
        font-weight: normal;
    }

    .node::before {
        display: inline-block;
        margin-right: 6px;
        transition: all 0.45s;
    }

    .node::before {
        /* -ms-transform: rotate(60deg); /* IE 9 * /
       -webkit-transform: rotate(60deg); /* Safari * /
       /*transform: rotate(60deg);*/
        transition: all 0.45s; 
    }

    .nested {
        display: none;
        transition: all 0.45s;
    }

    .active {
        display: block;
        transition: all 0.45s;
    }


</style>
