@page "/DataSources/Design/{Id:guid}"
@page "/DataSources/Design/"
@using VideoVault.WebApi
@using System.Net
@using System.Text.Json.Nodes
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization
@using Newtonsoft.Json
@using VideoVault.WebUI.Components.Tab
@using VideoVault.WebUI.Services
@using VideoVault.WebUI.Components.MappingModal

@inject IDataSourceClient _dataSourceService
@inject IStringLocalizer<App> L
@inject NavigationManager _navigationManager

<AuthorizeView roles="superuser">
    <Authorized Context="Auth">

        <TabControl>
            <TabPage Text=@L["DATASOURCES_DESIGN"]>

                <h1>@L["DATASOURCES_DESIGN_TITLE"]</h1>

                <EditForm Model="@DataSource" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>@L["DATASOURCES_DESIGN_NR_COLUMNS"]</label>
                        <select class="form-control selectpicker" @bind="SelectedNode">
                            <option>--select--</option>
                            @foreach (var node in AvailableNodes)
                            {
                                <option value="@node.FullName">@L[node.FriendlyName]</option> // Blazor needs to know what values it binds to!
                            }
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">@L["BUTTON_SUBMIT"]</button>
                </EditForm>
                
                <MappingModal Node="CurrentNode" @bind-IsVisible="ShowModal"></MappingModal>
            
            </TabPage>
        </TabControl>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public DataSourceDto DataSource{ get; set; }
    public MappingNodeDto CurrentNode { get; set; }
    public List<MappingNodeDto> AvailableNodes { get; set; } = new List<MappingNodeDto>();

    [Parameter]
    public string SelectedNode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DataSource = new DataSourceDto()
        {
        };

        try {
            if (Id != Guid.Empty)
            {   
                DataSource = await _dataSourceService.GetByIdAsync(Id);
                CurrentNode = DataSource.RootNode;
                AvailableNodes = (await _dataSourceService.GetMappingNodesAsync()).ToList();
            }
        }
        catch (ApiException)
        {
            _navigationManager.NavigateTo($"Identity/Account/Login?redirect={_navigationManager.ToBaseRelativePath(_navigationManager.Uri)}");
        }
    }

    private Task HandleValidSubmit()
    {
        CurrentNode = AvailableNodes.FirstOrDefault(x => x.FullName.Equals(SelectedNode));
        ShowModal = true;
        return Task.FromResult(true);
    }

    public bool ShowModal { get; set; }

}