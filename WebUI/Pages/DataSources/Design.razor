@page "/DataSources/Design/{Id:guid}"
@page "/DataSources/Design/"
@using VideoVault.WebApi
@using Microsoft.Extensions.Localization
@using VideoVault.WebUI.Components.Tab
@using VideoVault.WebUI.Components.TreeView

@inject IDataSourceClient _dataSourceService
@inject IStringLocalizer<App> L
@inject NavigationManager _navigationManager

<AuthorizeView roles="superuser">
    <Authorized Context="Auth">

        <TabControl>
            <TabPage Text=@L["DATASOURCES_DESIGN"]>

                <h1>@L["DATASOURCES_DESIGN_TITLE"]</h1>

                <CascadingValue Value="@AvailableNodes" Name="AvailableNodes" IsFixed="true">
                    <TreeView RootNode="RootNode"></TreeView>
                </CascadingValue>

            </TabPage>
        </TabControl>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public DataSourceDto DataSource { get; set; } = new DataSourceDto();

    private MappingNodeDto RootNode { get; set; }
    public List<MappingNodeDto> AvailableNodes = new List<MappingNodeDto>();

    [Parameter]
    public string SelectedNode { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        try
        {
            await base.SetParametersAsync(parameters);

            AvailableNodes = (await _dataSourceService.GetAvailableMappingNodesAsync()).ToList();
            StateHasChanged();
        }
        catch (ApiException)
        {
            _navigationManager.NavigateTo($"Identity/Account/Login?redirect={_navigationManager.ToBaseRelativePath(_navigationManager.Uri)}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try {
            if (Id != Guid.Empty)
            {   
                DataSource = await _dataSourceService.GetByIdAsync(Id);
                RootNode = DataSource.RootNode;
            }
            await base.OnInitializedAsync();
        }
        catch (ApiException)
        {
            _navigationManager.NavigateTo($"Identity/Account/Login?redirect={_navigationManager.ToBaseRelativePath(_navigationManager.Uri)}");
        }
    }

    private Task HandleValidSubmit()
    {
       // CurrentNode = AvailableNodes.FirstOrDefault(x => x.FullName.Equals(SelectedNode));
        return Task.FromResult(true);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // The first render will instantiate the GridColumn defined in the ChildContent.
            // GridColumn calls AddColumn during its initialization. This means that until
            // the first render is completed, the columns collection is empty.
            // Calling StateHasChanged() will re-render the component, so the second time it will know the columns
            StateHasChanged();
        }
    }
}