@page "/DataSources/Design/{Id:guid}"
@page "/DataSources/Design/"
@using VideoVault.WebApi
@using Microsoft.Extensions.Localization
@using VideoVault.WebUI.Components.Tab
@using VideoVault.WebUI.Components.TreeView
@using VideoVault.WebUI.Components.MappingForm

@inject IDataSourceClient _dataSourceService
@inject IStringLocalizer<App> L
@inject NavigationManager _navigationManager

<AuthorizeView roles="superuser">
    <Authorized Context="Auth">

        <TabControl>
            <TabPage Text=@L["DATASOURCES_DESIGN"]>

                <h1>@L["DATASOURCES_DESIGN_TITLE"]</h1>
                <ErrorBoundary>
                    <ChildContent>
                        <EditForm Model="DataSource" OnValidSubmit="@HandleValidSubmit">
                            <table class="table">
                                <tbody>
                                <tr>
                                    <td scope="row" class="border-right">
                                        <CascadingValue Value="@SelectedNode" Name="SelectedNode" IsFixed="true">
                                            <CascadingValue Value="@AvailableNodes" Name="AvailableNodes" IsFixed="true">
                                                <TreeView RootNode="RootNode" OnSetAsSelected="@(OnSetAsSelectedCallback)"></TreeView>
                                            </CascadingValue>
                                        </CascadingValue>
                                    </td>
                                    <td scope="row">
                                        <MappingForm Node="SelectedNode"></MappingForm>
                                    </td>
                                </tr>
                                <tr>
                                    <td scope="row">
                                        <button type="submit" class="btn btn-primary">@L["BUTTON_SUBMIT"]</button>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </EditForm>
                    </ChildContent>
                    <ErrorContent>
                        <p class="alert alert-danger">An error occurred while editing data source. Exception: @Exception?.Message</p>
                    </ErrorContent>
                </ErrorBoundary>

            </TabPage>
        </TabControl>
    </Authorized>
</AuthorizeView>

@code {
    private Exception Exception { get; set; }
    
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public DataSourceDto DataSource { get; set; } = new DataSourceDto();

    private MappingNodeDto RootNode { get; set; }
    private MappingNodeDto SelectedNode { get; set; }
    
    public List<MappingNodeDto> AvailableNodes = new List<MappingNodeDto>();
    
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        try
        {
            await base.SetParametersAsync(parameters);

            AvailableNodes = (await _dataSourceService.GetAvailableMappingNodesAsync()).ToList();
            StateHasChanged();
        }
        catch (ApiException)
        {
            _navigationManager.NavigateTo($"Identity/Account/Login?redirect={_navigationManager.ToBaseRelativePath(_navigationManager.Uri)}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id != Guid.Empty)
            {
                DataSource = await _dataSourceService.GetByIdAsync(Id);
                RootNode = DataSource.RootNode;
            }
            await base.OnInitializedAsync();
        }
        catch (ApiException)
        {
            _navigationManager.NavigateTo($"Identity/Account/Login?redirect={_navigationManager.ToBaseRelativePath(_navigationManager.Uri)}");
        }
        catch (Exception e)
        {
            Exception = e;
            throw;
        }
    }

    private async Task HandleValidSubmit()
    {
        var dataSource = await _dataSourceService.UpdateAsync(Id, new UpsertDataSourceCommand() { DataSource = DataSource });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // The first render will instantiate the GridColumn defined in the ChildContent.
            // GridColumn calls AddColumn during its initialization. This means that until
            // the first render is completed, the columns collection is empty.
            // Calling StateHasChanged() will re-render the component, so the second time it will know the columns
            StateHasChanged();
        }
    }

    private void OnSetAsSelectedCallback(MappingNodeDto node)
    {
        SelectedNode = node;
        //Show properties
    }
}