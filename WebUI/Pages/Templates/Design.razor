@page "/Templates/Design/{Id:int}"
@page "/Templates/Design/"
@using VideoVault.WebApi
@using System.Net
@using System.Text.Json.Nodes
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization
@using Newtonsoft.Json
@using VideoVault.WebUI.Components.Tab
@using VideoVault.WebUI.Services
@using VideoVault.WebUI.Components.EditableTable

@inject ITemplateClient _templateService
@inject IStringLocalizer<App> L
@inject NavigationManager _navigationManager

<AuthorizeView roles="superuser">
    <Authorized Context="Auth">

        <TabControl>
            <TabPage Text=@L["TEMPLATES_DESIGN"]>

                <h1>@L["TEMPLATES_DESIGN_TITLE"]</h1>

                <EditForm Model="@Template" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group d-none">
                        <label>@L["TEMPLATES_DESIGN_SHEETNAME"]</label>
                    </div>
                    <div class="form-group">
                        <SheetNavigation>
                            <TabControl>
                                @if (Template.Sheets != null)
                                {
                                    @foreach (var sheet in Template.Sheets)
                                    {
                                        <TabPage Text=@sheet.Name>
                                            <EditableTable sheet="@sheet">

                                            </EditableTable>
                                        </TabPage>
                                    }
                                }
                            </TabControl>
                        </SheetNavigation>
                    </div> 
                    <button type="submit" class="btn btn-primary">@L["BUTTON_SUBMIT"]</button>
                    <button class="btn btn-primary" @onclick="() => NewSheetAsync()">@L["BUTTON_NEWSHEET"]</button>
                </EditForm>
            </TabPage>
        </TabControl>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public SpreadSheetTemplateDto Template { get; set; }

    [Parameter]
    public int SheetIndex { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Template = new SpreadSheetTemplateDto()
        {
        };

        try {
            if (Id > 0)
            {
                Template = await _templateService.GetByIdAsync(Id);
            }
        }
        catch (ApiException)
        {
            _navigationManager.NavigateTo($"Identity/Account/Login?redirect={_navigationManager.ToBaseRelativePath(_navigationManager.Uri)}");
        }
    }

    private Task HandleValidSubmit()
    {
        return Task.FromResult(true);
    }

    private async Task NewSheetAsync()
    {
        try
        {
            Template = await _templateService.AddSheetAsync(new AddSheetTemplateCommand() { SpreadSheetTemplate = Template, Name = L["TEMPLATE_SHEET_NEWNAME"] });
        }
        catch (ApiException e)
        {
            NavigationManager.NavigateTo($"Identity/Account/Login?redirect={NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}");
        }
    }
}