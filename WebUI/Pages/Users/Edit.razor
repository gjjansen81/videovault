@page "/Users/Edit/{Id:int}"
@page "/Users/Edit/"
@using System.Net
@using System.Text.Json
@using VideoVault.WebApi
@using Microsoft.AspNetCore.Components.Forms
@using VideoVault.WebUI.Components
@using VideoVault.WebUI.Models
@inject IUserClient UserService

<AuthorizeView roles="superuser">
    <Authorized Context="Auth">
        <EditForm Model="@User" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <CustomValidator @ref="customValidator" />
            <ValidationSummary />
            <p>
                <label>
                    User Name:
                    <InputText @bind-Value="User.UserName" />
                </label>
            </p>
            <p>
                <label>
                    E-mail address:
                    <InputText @bind-Value="User.Email" />
                </label>
            </p>
            <p>
                <label>
                    Name:
                    <InputText @bind-Value="User.Name" />
                </label>
            </p>
            <p>
                <label>
                    Password:
                    <InputText @bind-Value="User.Password" />
                </label>
            </p>
            <p>
                <label>
                    Confirm password:
                    <InputText @bind-Value="PasswordConfirm" />
                </label>
            </p>

            <button type="submit">Submit</button>
        </EditForm>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public UserDto User { get; set; }

    [Parameter]
    public string PasswordConfirm { get; set; }

    private CustomValidator customValidator;

    protected override async Task OnInitializedAsync()
    {
        User = new UserDto();
        if (Id != Guid.Empty)
            User = await UserService.GetByIdAsync(Id);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await UserService.CreateAsync(new UpsertUserCommand() {User = User});

            if (result.Succeeded)
                User = result.Output;
        }
        catch (ApiException e)
        {
            if (e.StatusCode == (int)HttpStatusCode.UnprocessableEntity)
            {
                var validationResponse = JsonSerializer.Deserialize<ValidationResponseModel>(e.Response.ToString());

                customValidator.DisplayErrors(validationResponse.ModelState);
            };
        }
    }
}