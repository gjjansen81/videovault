@page "/Users/SetPassword/{Id:guid}"
@page "/Users/SetPassword/"
@using System.Net
@using System.Text.Json
@using VideoVault.WebApi
@using Microsoft.Extensions.Localization
@using VideoVault.WebUI.Components
@using VideoVault.WebUI.Models
@using PasswordDto = VideoVault.WebApi.PasswordDto
@using SetPasswordCommand = VideoVault.WebApi.SetPasswordCommand
@inject IUserClient UserService
@inject ICustomerClient CustomerService
@inject IStringLocalizer<App> L

<AuthorizeView roles="superuser">
    <Authorized Context="Auth">
        <EditForm Model="@Password" OnValidSubmit="@HandleValidPasswordSubmit">
            <DataAnnotationsValidator />
            <CustomValidator @ref="_passwordValidator" />
            <ValidationSummary />

            <div class="form-group d-none">
                <label>@L["USERS_SETPASSWORD_PASSWORD"]</label>
                <InputText @bind-Value="Password.Password" TValue="int" class="form-control" />
            </div>
            <div class="form-group d-none">
                <label>@L["USERS_SETPASSWORD_PASSWORDCONFIRM"]</label>
                <InputText @bind-Value="Password.PasswordConfirm" TValue="int" class="form-control" />
            </div>
           
            <button type="submit" class="btn btn-primary">@L["BUTTON_SUBMIT"]</button>
        </EditForm>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public Guid Id { get; set; }


    [Parameter]
    public PasswordDto Password { get; set; }

    private CustomValidator _passwordValidator;

    protected override async Task OnInitializedAsync()
    {
        Password = new PasswordDto();
    }


    private async Task HandleValidPasswordSubmit()
    {
        try
        {
            Password.Id = Id;
            var result = await UserService.SetPasswordAsync(new SetPasswordCommand() { PasswordDto = Password });

            if (!result.Succeeded)
            {
                var errors = new Dictionary<string, List<string>> { { "Password", new List<string>() { "Error setting password" } } };
                _passwordValidator.DisplayErrors(errors);
            }
        }
        catch (ApiException e)
        {
            if (e.StatusCode == (int)HttpStatusCode.UnprocessableEntity)
            {
                var validationResponse = JsonSerializer.Deserialize<ValidationResponseModel>(e.Response.ToString());

                _passwordValidator.DisplayErrors(validationResponse.ModelState);
            }
        }
    }
}